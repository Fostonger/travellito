version: "3.8"
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: app
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  web:
    build:
      context: ./web
      args:
        APP_VERSION: "${APP_VERSION:-0.1.0}"
    image: travellito-web:${APP_VERSION:-0.1.0}
    environment:
      BOT_TOKEN:   "${BOT_TOKEN}"
      BOT_ALIAS:   "${BOT_ALIAS}"
      SUPPORT_BOT_TOKEN: "${SUPPORT_BOT_TOKEN}"
      DB_DSN:      "postgresql+asyncpg://admin:secret@db/app"
      SECRET_KEY:  "${SECRET_KEY}"
      SERVER_HOST: "${SERVER_HOST}"
      WEBAPP_URL: "${WEBAPP_URL}"
      S3_ENDPOINT: "minio:9000"
      PUBLIC_S3_ENDPOINT: "localhost:9000"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadminsecret"
      S3_BUCKET: "tour-images"
      METRIKA_COUNTER: "${METRIKA_COUNTER}"
      METRIKA_MP_TOKEN: "${METRIKA_MP_TOKEN}"
    depends_on: [db]
    ports: ["80:8000"]
    restart: unless-stopped

  bot:
    build:
      context: ./bot
      args:
        APP_VERSION: "${APP_VERSION:-0.1.0}"
    image: travellito-bot:${APP_VERSION:-0.1.0}
    environment:
      BOT_TOKEN: "${BOT_TOKEN}"
      WEBAPP_URL: "${WEBAPP_URL}"
      WEB_API: "http://web:8000"
      PANEL_URL: "http://localhost:8000/login"
      SECRET_KEY: "${SECRET_KEY}"
      BOT_MODE: "tourist"
    depends_on: [web]
    ports: ["8080:8080"]
    restart: unless-stopped

  support-bot:
    build:
      context: ./bot
      dockerfile: Dockerfile.support
      args:
        APP_VERSION: "${APP_VERSION:-0.1.0}"
    image: travellito-support-bot:${APP_VERSION:-0.1.0}
    environment:
      SUPPORT_BOT_TOKEN: "${SUPPORT_BOT_TOKEN}"
      SUPPORT_BOT_WEBHOOK_URL: "${SUPPORT_BOT_WEBHOOK_URL}"
      WEB_API: "http://web:8000"
    depends_on: [web]
    ports: ["8081:8001"]
    restart: unless-stopped

  # manager-bot:
  #   build: ./bot
  #   environment:
  #     BOT_TOKEN: "${MANAGER_BOT_TOKEN}"
  #     WEBAPP_URL: "${WEBAPP_URL}"
  #     WEB_API: "${WEB_API}"
  #     SECRET_KEY: "${SECRET_KEY}"
  #     BOT_MODE: "manager"
  #   depends_on: [web]
  #   restart: unless-stopped

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER:     minioadmin
      MINIO_ROOT_PASSWORD: minioadminsecret
    volumes:
      - minio_data:/data
    ports: ["9000:9000", "9001:9001"]          # 9001 â†’ nice web console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
  minio_data: